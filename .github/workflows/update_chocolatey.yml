name: Chocolatey Update

on:
  workflow_dispatch:
    inputs:
      TARGET_GH_REPO:
        description: "Target GitHub repository for release"
        required: true
        default: "usebruno/bruno"

env:
  GH_TOKEN: ${{ secrets.GH_TOKEN }}
  TARGET_GH_REPO: ${{ github.event.inputs.TARGET_GH_REPO }}
  CHOCO_API_KEY: ${{ secrets.CHOCO_API_KEY }}

jobs:
  update-chocolatey:
    runs-on: windows-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GH_TOKEN }}
          fetch-depth: 0

      - name: Get latest release info
        id: release
        shell: pwsh
        run: |
          $release = gh release list --repo $env:TARGET_GH_REPO --limit 1 | Select-Object -First 1
          $version = $release -split '\t' | Select-Object -First 1
          $version = $version.TrimStart('v')
          echo "version=$version" >> $env:GITHUB_OUTPUT

      - name: Check if update needed
        id: check_update
        shell: pwsh
        run: |
          $currentVersion = (Get-Content ./bruno.nuspec | Select-String -Pattern '<version>(.*?)</version>').Matches.Groups[1].Value
          $newVersion = "${{ steps.release.outputs.version }}"
          
          if ($currentVersion -eq $newVersion) {
            echo "No update needed. Current version: $currentVersion, New version: $newVersion"
            echo "update_needed=false" >> $env:GITHUB_OUTPUT
          } else {
            echo "Update needed. Current version: $currentVersion, New version: $newVersion"
            echo "update_needed=true" >> $env:GITHUB_OUTPUT
          }

      - name: Download latest .exe
        if: steps.check_update.outputs.update_needed == 'true'
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Force -Path ./dist
          gh release download --repo $env:TARGET_GH_REPO --pattern "*.exe" --dir ./dist

      - name: Update release files
        if: steps.check_update.outputs.update_needed == 'true'
        shell: pwsh
        run: |
          ./scripts/update_release_files.ps1 -Version "${{ steps.release.outputs.version }}" -TargetRepo "$env:TARGET_GH_REPO"

      - name: Create tools directory
        if: steps.check_update.outputs.update_needed == 'true'
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Force -Path ./tools

      - name: Create VERIFICATION.txt
        if: steps.check_update.outputs.update_needed == 'true'
        shell: pwsh
        run: |
          $exePath = Get-ChildItem ./dist -Filter *.exe | Select-Object -First 1
          $checksum = Get-FileHash $exePath -Algorithm SHA256 | Select-Object -ExpandProperty Hash
          @"
          VERIFICATION

          Verification is intended to assist the Chocolatey moderators and community
          in verifying that this package's contents are trustworthy.

          Package can be verified like this:

          1. Go to

             x64: https://github.com/usebruno/bruno/releases/download/v${{ steps.release.outputs.version }}/$(Split-Path $exePath.Name -Leaf)

             to download the installer.

          2. You can use one of the following methods to obtain the SHA256 checksum:
             - Use powershell function 'Get-FileHash'
             - Use Chocolatey utility 'checksum.exe'

             checksum64: $checksum

          File 'license.md' is obtained from:
             https://github.com/usebruno/bruno/blob/main/license.md
          "@ | Out-File -FilePath ./tools/VERIFICATION.txt -Encoding UTF8

      - name: Create chocolateyinstall.ps1
        if: steps.check_update.outputs.update_needed == 'true'
        shell: pwsh
        run: |
          $exePath = Get-ChildItem ./dist -Filter *.exe | Select-Object -First 1
          $checksum = Get-FileHash $exePath -Algorithm SHA256 | Select-Object -ExpandProperty Hash
          @"
          `$ErrorActionPreference = 'Stop'
          `$toolsDir = "`$(Split-Path -Parent `$MyInvocation.MyCommand.Definition)"
          `$url = 'https://github.com/$env:TARGET_GH_REPO/releases/download/v${{ steps.release.outputs.version }}/$(Split-Path $exePath.Name -Leaf)'

          `$packageArgs = @{
            packageName    = '`$env:ChocolateyPackageName'
            fileType      = 'exe'
            url           = `$url
            softwareName  = 'Bruno*'
            checksum      = '$checksum'
            checksumType  = 'sha256'
            silentArgs    = '/S'
          }

          Install-ChocolateyPackage @packageArgs
          "@ | Out-File -FilePath ./tools/chocolateyInstall.ps1 -Encoding UTF8

      - name: Create chocolateyBeforeModify.ps1
        if: steps.check_update.outputs.update_needed == 'true'
        shell: pwsh
        run: |
          @"
          `$ErrorActionPreference = 'Stop'

          `$packageName = 'bruno'
          `$softwareName = 'Bruno*'

          [array]`$key = Get-UninstallRegistryKey -SoftwareName `$softwareName

          if (`$key.Count -eq 1) {
            `$key | % {
              `$installLocation = `$_.InstallLocation
              if (`$installLocation) {
                Write-Host "`$(`$packageName) will be removed from `$installLocation"
              }
            }
          } elseif (`$key.Count -eq 0) {
            Write-Warning "`$packageName has already been uninstalled by other means."
          } elseif (`$key.Count -gt 1) {
            Write-Warning "`$key.Count matches found!"
            Write-Warning "To prevent accidental data loss, no programs will be uninstalled."
            Write-Warning "Please alert package maintainer the following keys were matched:"
            `$key | % {Write-Warning "- `$(`$_.DisplayName)`$(`$_.DisplayVersion)"}
          }
          "@ | Out-File -FilePath ./tools/chocolateyBeforeModify.ps1 -Encoding UTF8

      - name: Create chocolateyUninstall.ps1
        if: steps.check_update.outputs.update_needed == 'true'
        shell: pwsh
        run: |
          @"
          `$ErrorActionPreference = 'Stop'

          `$packageName = 'bruno'
          `$softwareName = 'Bruno*'

          [array]`$key = Get-UninstallRegistryKey -SoftwareName `$softwareName

          if (`$key.Count -eq 1) {
            `$key | % {
              `$file = `$_.UninstallString
              if (`$file) {
                Write-Host "`$(`$packageName) will be uninstalled from `$file"
                Uninstall-ChocolateyPackage -PackageName `$packageName `
                                          -FileType 'exe' `
                                          -SilentArgs '/S' `
                                          -File `$file
              }
            }
          } elseif (`$key.Count -eq 0) {
            Write-Warning "`$packageName has already been uninstalled by other means."
          } elseif (`$key.Count -gt 1) {
            Write-Warning "`$key.Count matches found!"
            Write-Warning "To prevent accidental data loss, no programs will be uninstalled."
            Write-Warning "Please alert package maintainer the following keys were matched:"
            `$key | % {Write-Warning "- `$(`$_.DisplayName)`$(`$_.DisplayVersion)"}
          }
          "@ | Out-File -FilePath ./tools/chocolateyUninstall.ps1 -Encoding UTF8

      - name: Create nuspec file
        if: steps.check_update.outputs.update_needed == 'true'
        shell: pwsh
        run: |
          @"
          <?xml version="1.0" encoding="utf-8"?>
          <package xmlns="http://schemas.microsoft.com/packaging/2015/06/nuspec.xsd">
            <metadata>
              <id>bruno</id>
              <title>Bruno</title>
              <version>${{ steps.release.outputs.version }}</version>
              <authors>Anoop M D</authors>
              <owners>Anoop M D</owners>
              <summary>Opensource IDE For Exploring and Testing Api's</summary>
              <description><![CDATA[Bruno is a new and innovative API client, aimed at revolutionizing the status quo represented by Postman and similar tools out there.
          Bruno stores your collections directly in a folder on your filesystem. We use a plain text markup language, Bru, to save information about API requests.
          You can use git or any version control of your choice to collaborate over your API collections.
          Bruno is offline-only. There are no plans to add cloud-sync to Bruno, ever. We value your data privacy and believe it should stay on your device.

          ![screenshot](https://cdn.jsdelivr.net/gh/usebruno/bruno@main/assets/images/landing-2.png)]]></description>
              <projectUrl>https://github.com/$env:TARGET_GH_REPO</projectUrl>
              <tags>bruno api-client rest-client graphql-client foss</tags>
              <copyright>usebruno</copyright>
              <licenseUrl>https://github.com/$env:TARGET_GH_REPO/blob/main/license.md</licenseUrl>
              <requireLicenseAcceptance>false</requireLicenseAcceptance>
              <iconUrl>https://cdn.jsdelivr.net/gh/usebruno/bruno@main/assets/images/logo-transparent.png</iconUrl>
              <releaseNotes>https://github.com/$env:TARGET_GH_REPO/releases/tag/v${{ steps.release.outputs.version }}</releaseNotes>
              <docsUrl>https://docs.usebruno.com/</docsUrl>
              <projectSourceUrl>https://github.com/$env:TARGET_GH_REPO</projectSourceUrl>
              <packageSourceUrl>https://github.com/usebruno/bruno-chocolatey</packageSourceUrl>
              <dependencies>
                <dependency id="chocolatey-core.extension" version="1.3.3" />
              </dependencies>
            </metadata>
            <files>
              <file src="tools\**" target="tools" />
            </files>
          </package>
          "@ | Out-File -FilePath ./bruno.nuspec -Encoding UTF8

      - name: Create PR
        if: steps.check_update.outputs.update_needed == 'true'
        shell: pwsh
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"

          $branchExists = git ls-remote --heads origin "update-to-v${{ steps.release.outputs.version }}" | Select-String -Pattern "update-to-v${{ steps.release.outputs.version }}"
          if ($branchExists) {
            git checkout "update-to-v${{ steps.release.outputs.version }}"
            git reset --hard origin/main
          } else {
            git checkout -b "update-to-v${{ steps.release.outputs.version }}"
          }

          git add .
          git reset -- dist/
          git status
          $changes = git diff --cached --name-only
          if ($changes) {
            git commit -m "Update to v${{ steps.release.outputs.version }}"
            git remote set-url origin https://x-access-token:${{ secrets.GH_TOKEN }}@github.com/${{ github.repository }}.git
            git push origin "update-to-v${{ steps.release.outputs.version }}" --force
            gh pr create --title "Update to v${{ steps.release.outputs.version }}" --body "Automated update to version ${{ steps.release.outputs.version }}"
          } else {
            echo "No changes to commit"
          }

      - name: Install Chocolatey
        if: steps.check_update.outputs.update_needed == 'true'
        shell: pwsh
        run: |
          Set-ExecutionPolicy Bypass -Scope Process -Force
          [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072
          iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))

      - name: Pack and Push to Chocolatey
        if: steps.check_update.outputs.update_needed == 'true'
        shell: pwsh
        run: |
          choco pack
          choco push --source="https://push.chocolatey.org/" --api-key $env:CHOCO_API_KEY
